buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }


    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1')
        classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
    }
}

repositories {
    mavenCentral()
    jcenter()

}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'
apply plugin: 'com.palantir.docker'

group = 'gabrielsson'
version = '1.1.0'
description = 'Pizza menu facade'
sourceCompatibility = '1.8'

dependencies {
    implementation 'com.graphql-java:graphql-java:11.0'
    implementation 'com.graphql-java:graphql-java-tools:5.2.4'
    implementation 'com.graphql-java:graphiql-spring-boot-autoconfigure:5.0.2'
    implementation 'com.graphql-java:graphql-spring-boot-starter:5.0.2'
    implementation 'com.google.guava:guava:26.0-jre'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus:latest.release'
    implementation 'com.github.dpaukov:combinatoricslib3:3.3.0'
    implementation 'io.opentracing.contrib:opentracing-spring-web-starter:2.1.0'
    compileOnly("org.projectlombok:lombok:1.18.10")
    annotationProcessor("org.projectlombok:lombok:1.18.10")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar {
    archivesBaseName = 'pizza-menu-facade'
}


task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

node {
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
    description = "Installs all dependencies from package.json"
    workingDir = file("${project.projectDir}/src/main/frontend")
    args = ["install"]
}

task appNpmBuild(type: NpmTask) {
    description = "Builds production version of the frontend"
    workingDir = file("${project.projectDir}/src/main/frontend")
    args = ["run", "build"]
}
docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}


task copyWebApp(type: Copy) {
    from 'src/main/frontend/dist'
    into('build/resources/main/static/.')
}


appNpmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn appNpmBuild
compileJava.dependsOn copyWebApp
